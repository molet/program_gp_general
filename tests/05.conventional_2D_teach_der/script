#!/bin/bash

################################################################################
# conventional_2D_teach_der
#
# Teaching 2 dimensional derivative data using conventional GP
#
# Function: (sin(x)+2.0*cos(x)*cos(x))*(sin(y)+2.0*cos(y)*cos(y))
# Derivatives: (cos(x)-4*cos(x)*sin(x))*(sin(y)+2.0*cos(y)*cos(y)) and (sin(x)+2.0*cos(x)*cos(x))*(cos(y)-4*cos(y)*sin(y))
###############################################################################

# Program specifications
gp_general=../../bin/gp_general
export OMP_NUM_THREADS=8

# Variable specifications
ndim=2						# dimension
range_min=(-3.14159265359 -3.14159265359)	# minimum values
range_max=(3.14159265359 3.14159265359)		# maximum values
periodicity=(6.28318530718 6.28318530718)	# periodicities
predgrid=(24 24)				# grid points for prediction
nsamples=2000           		        # number of training set
seed=3141592					# random seed

# GP specifications
delta=1.732					# delta (function deviation)
sigmader=(2.5 2.5)				# sigma of derivatives (deviation of derivatives)
theta=(1.0 1.0)					# theta values (length scale)

# Create reference data
awk -v "predgrid0=${predgrid[0]}" -v "predgrid1=${predgrid[1]}" -v "range_min0=${range_min[0]}" -v "range_max0=${range_max[0]}" -v "range_min1=${range_min[1]}" -v "range_max1=${range_max[1]}" \
     'BEGIN{inc0=(range_max0-range_min0)/predgrid0; inc1=(range_max1-range_min1)/predgrid1}END{for(i=1; i<=predgrid0; i++){x=range_min0+(i-0.5)*inc0;for(j=1; j<=predgrid1; j++){y=range_min1+(j-0.5)*inc1; printf "%15.6f%15.6f%15.6f%15.6f%15.6f\n", x, y, (sin(x)+2.0*cos(x)*cos(x))*(sin(y)+2.0*cos(y)*cos(y)), (cos(x)-4*cos(x)*sin(x))*(sin(y)+2.0*cos(y)*cos(y)), (sin(x)+2.0*cos(x)*cos(x))*(cos(y)-4*cos(y)*sin(y))}; print ""}}' /dev/null > reference.txt

# Create training data
awk -v "nsamples=$nsamples" -v "seed=$seed" -v "range_min0=${range_min[0]}" -v "range_max0=${range_max[0]}" -v "range_min1=${range_min[1]}" -v "range_max1=${range_max[1]}" -v "sigmader0=${sigmader[0]}" -v "sigmader1=${sigmader[1]}" \
     'function gaussian() {pi=atan2(0,-1); return sqrt(-2*log(rand()))*cos(pi*rand())}; BEGIN{srand(seed); range0=range_max0-range_min0; range1=range_max1-range_min1; for(i=1; i<=nsamples; i++){x=range0*rand()+range_min0; y=range1*rand()+range_min1; printf "%15.6f%15.6f%15.6f%15.6f\n", x, y, (cos(x)-4*cos(x)*sin(x))*(sin(y)+2.0*cos(y)*cos(y))+sqrt(sigmader0)*gaussian(), (sin(x)+2.0*cos(x)*cos(x))*(cos(y)-4*cos(y)*sin(y))+sqrt(sigmader1)*gaussian()}}' /dev/null > training.txt

# Do GP!
range=`for((i=0;i<$ndim;i++));do echo -n "${range_min[$i]} ${range_max[$i]} ";done`

echo "$gp_general -InDer -OutVal -OutDer -NDim $ndim -Delta $delta -SigmaDer ${sigmader[@]} -Theta ${theta[@]} -Periodicity ${periodicity[@]} -Range $range -PredGrid ${predgrid[@]} -Verbose -Gnuplot -TrainFile training.txt -PredFile prediction.txt"

$gp_general -InDer -OutVal -OutDer -NDim $ndim -Delta $delta -SigmaDer ${sigmader[@]} -Theta ${theta[@]} -Periodicity ${periodicity[@]} -Range $range -PredGrid ${predgrid[@]} -Verbose -Gnuplot -TrainFile training.txt -PredFile prediction.txt
